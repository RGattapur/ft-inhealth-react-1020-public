
const slides = [

    { h : "Javascript" , t : ["50 useful tips for Javascript developers"," Use the keyboard <span> &larr; arrow keys &rarr;</span> for next/previous slide."," Click on the <span>dots</span> to jump to a slide"," Created by John Coumbe at <a href='https://www.frameworktraining.co.uk/'>Framework Training</a>"] },
	{ h : "Variables" , t : ["Define variables with <span>let</span> or <span>const</span>.", " Block scope works and variables are not hoisted.","let year=2020", "const BCORP='Framework Training'"] },
	{ h : "const or let?" , t : ["Choose <span>const</span> as your first choice for a variable.", " Choose <span>let</span> if the variable will change value later.", "const YEAR=2020","let score=0"] },
	{ h : "Equality" , t : ["Use the strict equality operator <span>===</span>"," Matching values must be of the same type and value", "let score = 4","console.log(score ==='4'); // false"] },
	{ h : "Truthy, falsy" , t : ["Most expressions evaluate to boolean true except for:",'false, undefined, null, NaN, 0,""'] },
	{ h : "null, undefined" , t : ["null is an intentional nothing-value"," Variables default to undefined if unassigned.","let project = null;","let village; // undefined" ] },
	{ h : "Arrays" , t : ["Use <span>push & pop</span> to add/remove elements at the end.", "basket.push('bread')", "let last = basket.pop()"] },
	{ h : "Arrays" , t : ["Use <span>unshift & shift</span> to add/remove elements at the start.", "basket.unshift('milk')", "let first = basket.shift()"] },
	{ h : "Array constants" , t : ["The <em>contents</em> of an array constant can be changed.","const LOTTO=[4,6,8,10]","LOTTO.push(12); //changed"] },
	{ h : "Object constants" , t : ["The <em>contents</em> of an object constant can be changed.","const VISIT={year:2020}","VISIT.year++; //changed"] },
	{ h : "Types" , t : ["Javascript is loosely typed."," The type of a variable can be changed at run-time.","let city ='Seville'","city=64; // No error"] },
	{ h : "Copy by value" , t : ["Strings and numbers <span>copy by value</span>."," Assignment creates separate independent variables.","let a=4;", "let b=a","b++;","console.log(a,b); // 4 5"] },
	{ h : "Copy by reference" , t : ["Objects and array <span>copy by reference</span> creating 2 pointers to the same variable."," Use the <span>spread operator</span> to avoid this problem.","let x=[2,4,6,8]","let y=x; // x and y point to same array"] },
	{ h : "Primitives" , t : ["Strings, numbers, booleans, null and undefined are primitives."," They hold a single value. The rest of the language is object-like","let city='Seville'","city.nation='Spain'; // fails silently"] },
	{ h : "Array comparison" , t : ["Arrays are compared by identity."," Two arrays can never be equal.","let italia=['Rome']; let italy=['Rome']","console.log(italy===italia); //false"]},
	{ h : "Object comparison" , t : ["Objects are compared by identity."," Two objects can never be equal.","let italia={city:'Rome'}; let italy={city:'Rome'}","console.log(italy===italia); //false"]},
	{ h : "An array of objects" , t : ["An array of objects describe 2-dimensional data.","let weather=[{name:'Oslo',temp:-4},{name:'Paris',temp:12}];","console.table( weather );"]},
	{ h : "forEach" , t : ["We can iterate over an array of objects using forEach, passing it a function."," This approach avoids the need to write a for loop","const show=city=>console.log(city.temp)","weather.forEach(show)"]},
	{ h : "JSON" , t : ["JSON is a string representation of JS objects"," Stringify and parse convert between object and string","let s = JSON.stringify({city:'Oslo'})","let ob=JSON.parse(s)"]},
	{ h : "Local Storage" , t : ["Data can persist in browser localStorage as JSON strings.", "localStorage.news = JSON.stringify(news)", "let news = localStorage.news ? JSON.parse(localStorage.news) : []"]},
	{ h : "Global variables" , t : ["Minimise the use of global variables."," Use <span>ES6 modules, classes, functions and block-scope</span> to restrict variable scope.","if(city === window.city) { console.log('Global') }"]},
	{ h : "Copy arrays" , t : ["Use the ES6 spread operator to copy arrays."," This code creates two separate arrays.","const movies=[...films]","(movies===films); // false"] },
	{ h : "Copy objects" , t : ["Use the ES6 spread operator to copy objects."," This code creates two separate objects.","const winner={...person}","(winner===person); // false"] },
	{ h : "Destructure objects" , t : ["Destructuring unpacks properties from objects","const person={name:'Fred',age:64}","const {name,age}=person"] },
	{ h : "Destructure objects" , t : ["Destructuring unpacks elements from arrays","const movie=['De Niro','Taxi Driver']","const [actor,title]=movie"] },
	{ h : "Destructuring: defaults" , t : ["Defaults apply if a property is missing."," Year is missing from object trip.","let trip = {city:'Seville'}","let { year=2020, city } = trip"] },
	{ h : "Destructuring: functions" , t : ["We can destructure function arguments"," This self-documenting code simplifies the function body.","const show = ({name,temp}) => `${name} is ${temp} F`","show({name:'Seville', temp:40})"] },
	{ h : "Arrow functions" , t : ["ES6 fat arrow syntax creates concise 1-line functions.", "const double = n => n*2"] },
	{ h : "Arrow functions" , t : ["2+ arguments need to be wrapped in parentheses ()", "const calcArea = (w,l) => w*l"] },
	{ h : "Arrow functions" , t : ["Multiple line arrow functions require curly braces {}", " The return statement needs to be explicit","const quad = n => { let r=n*4; return r; }"] },
	{ h : "Arrow functions" , t : ["Arrow functions that return objects require additional ()","const makeCity(name,temp)=>({name,temp})"] },
	{ h : "Template strings" , t : ["Interpolation merges strings and variables."," Wrap the string in <span>back-tick</span> characters.","let city={name='Oslo',temp:4}","let message=`${city.name} is ${city.temp}Â°F`"] },
	{ h : "Classes" , t : ["Multiple objects can be instantiated from a class, each with their own data.","const duck = new Animal('quack')","const sheep = new Animal('baaaa')"] },
	{ h : "Classes" , t : ["The <span>constructor</span> method runs when an object is created.","const duck = new Animal('quack')","constructor(s) { this.sound=s }"] },
	{ h : "Classes" , t : ["Class properties are created on keyword <span>this</span>."," They are visible to all other methods in the class","constructor(s) { this.sound=s }","show() { console.log(this.sound) }"] },
	{ h : "Classes" , t : ["Arrow functions change the scope of keyword <span>this</span>."," Write class methods as arrow functions. Keyword <span>this</span> will lexically bind to the class.","show = () => console.log(this.sound)","window.setTimeout( duck.show, 1 ); // works" ] },
	{ h : "Classes" , t : ["ES6 classes are syntactic sugar."," Under the hood JS still uses <span>prototypes</span> to link objects together." ] },
	{ h : "Modules" , t : ["Organise code into separated ES6 modules."," Each module has its own scope.","export {calcArea}","import {calcArea} from './utils.js'"] },
	{ h : "Frameworks" , t : ["Learn a framework like <span>Angular</span> or <span>React</span>."," They keep the UI (view) in sync when application state changes."] },
	{ h : "map, filter, reduce, sort" , t : ["<span>Functional programming</span> methods transform arrays of data."," They are <span>pure</span> functions which can be <span>chained</span> together."] },
	{ h : "Map" , t : ["Map applies a function to every array element"," It creates a new array of the same length.","const ltrs=['a','b']","ltrs.map( l => l.toUpperCase()); // ['A','B']"] },
	{ h : "Filter" , t : ["Filter applies a boolean function to every array element"," It returns a new array of different length.","const series=[2,5,8,11]","series.filter( evenNumbers ); // [ 2,8 ]"] },
	{ h : "Reduce" , t : ["Reduces compares adjacent array elements reducing it to a single value","const larger = (a,b) => Math.max(a,b)","[ 10,2,4,6,40,5].reduce( larger ); // 40"] },
	{ h : "Sort" , t : ["Sort orders an array."," It uses a comparator function to apply the sort logic.","const descending = (a,b) => b>a ? 1:-1","series.sort(descending)"] },
	{ h : "Pure functions" , t : ["Pure functions <span>change nothing</span> outside their local scope"," Pure functions always return <span>predictable</span> values", " Pure functions are <span>chainable</span>", " Pure functions include <span>map, reduce, filter, sort</span>","const hyphenate = s => s.split(' ').join('-')"]},
	{ h : "Promises" , t : ["Promises are objects which handle asynchronous problems.", " Fetch is a Promise-based API for making AJAX requests","fetch('spain.json').then( r => r.json()).then( data => console.log(data))"]},
	{ h : "The DOM" , t : ["The DOM is a tree-like memory-based structure that the browser creates at run-time.", " JS keyword <span>document</span> points at The Dom", "document.body.textContent = 'Hello'"]},
	{ h : "The DOM" , t : ["querySelector finds the first matching element"," querySelectorAll finds all matching elements","let city = document.querySelector('.capital')","let colours = document.querySelectorAll('.palette')"]},
	{ h : "this & bind" , t : ["The value of keyword <span>this</span> inside a function depends on how the function is called."," Bind creates a new function and sets the run-time value of this to point to a specific object.","window.setTimeout(animal.speak, 1000)","window.setTimeout(animal.speak.bind(animal), 1000)"]},

];

// { h : "Angular" , t : ["Angular is a Javascript component-based framework created by Google"," The framework makes extensive use of <span>Typescript</span> and <span>Observables</span>"]},
// { h : "React" , t : ["React is a Javascript component-based framework from Facebook"," Reacts <span>JSX</span> syntax allows markup in code. React <span>Hooks</span> are functions which retain state."]},
// { h : "Node" , t : ["Node implements the Javascript language without a browser DOM"," Node allows <span>file-IO</span> and is suited to creating command-line tools"]},
// { h : "Electron" , t : ["Electron creates Javascript applications"," It combines the command-line features of Node with a Chromium browser front-end."]},
